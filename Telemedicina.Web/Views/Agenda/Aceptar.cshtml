@model Telemedicina.Core.Atencion


@{
    ViewBag.Title = "Conectar";
}

<h2>Appointment with patient</h2>


<div id="div_device" class="panel panel-default">
    <div class="select">
        <label for="audioSource">Audio source: </label><select id="audioSource"></select>
    </div>
    <div class="select">
        <label for="videoSource">Video source: </label><select id="videoSource"></select>
    </div>
</div>

@using (Html.BeginForm())
{
    <input type="hidden" name="Form.Id" value="@Model.IdAtencion" />
    <div id="div_join" class="panel panel-default">
        <div class="panel-body">
            @*<input type="hidden" value="5649add89fa64e43ab99175cacf89146" id="key" />*@
            <input id="video" type="checkbox" style="display:none;" checked />
            <input type="hidden" id="channel" value="@Model.CodigoAtencion" />
            <button id="join" class="btn btn-primary" style="display:none;" onclick="join()">Join</button>
            <input type="submit" value="Finish" class="btn btn-primary" id="leave" onclick="leave()" />
            @*@Html.ActionLink("Finish", "Detalle", new { id = Model.IdAtencion }, new { @class = "btn btn-primary", id = "leave", onclick = "leave()" })*@
            @*<button id="publish" class="btn btn-primary" onclick="publish()">Publish</button>
                <button id="unpublish" class="btn btn-primary" onclick="unpublish()">Unpublish</button>*@
        </div>
    </div>

    if (Model.Persona.FichaPersonas.Any())
    {

        <h3>Patient Records</h3>
    <div class="row">
        <div class="col-md-12">
            <table class="table table-responsive table-striped">
                <thead>
                    <tr>
                        <th>Illness</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var atencion in Model.Persona.FichaPersonas)
                    {
                        <tr>
                            <td>
                                @atencion.Enfermedad
                            </td>
                            <td>
                                @atencion.Descripcion
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>
    }
            <div id="video" style="margin:0 auto;">
                <div id="agora_local" style="float:right;width:210px;height:147px;display:inline-block;"></div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <b>Notes:</b> <br />
                    @Html.TextArea("Form.Notas", new { @class = "form-control", cols = "300" })
                </div>
            </div>
            }

            @section scripts
{
                <script type="text/javascript">
                    var client, localStream, camera, microphone;

                    var audioSelect = document.querySelector('select#audioSource');
                    var videoSelect = document.querySelector('select#videoSource');

                    function join() {
                        document.getElementById("join").disabled = true;
                        document.getElementById("video").disabled = true;
                        var channel_key = null;

                        client = AgoraRTC.createClient({ mode: 'interop' });
                        client.init('5649add89fa64e43ab99175cacf89146', function () {
                            console.log("AgoraRTC client initialized");
                            client.join(channel_key, channel.value, null, function (uid) {
                                console.log("User " + uid + " join channel successfully");

                                if (document.getElementById("video").checked) {
                                    camera = videoSource.value;
                                    microphone = audioSource.value;
                                    localStream = AgoraRTC.createStream({ streamID: uid, audio: true, cameraId: camera, microphoneId: microphone, video: document.getElementById("video").checked, screen: false });
                                    //localStream = AgoraRTC.createStream({streamID: uid, audio: false, cameraId: camera, microphoneId: microphone, video: false, screen: true, extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'});
                                    if (document.getElementById("video").checked) {
                                        localStream.setVideoProfile('720p_3');

                                    }

                                    // The user has granted access to the camera and mic.
                                    localStream.on("accessAllowed", function () {
                                        console.log("accessAllowed");
                                    });

                                    // The user has denied access to the camera and mic.
                                    localStream.on("accessDenied", function () {
                                        console.log("accessDenied");
                                    });

                                    localStream.init(function () {
                                        console.log("getUserMedia successfully");
                                        localStream.play('agora_local');

                                        client.publish(localStream, function (err) {
                                            console.log("Publish local stream error: " + err);
                                        });

                                        client.on('stream-published', function (evt) {
                                            console.log("Publish local stream successfully");
                                        });
                                    }, function (err) {
                                        console.log("getUserMedia failed", err);
                                    });
                                }
                            }, function (err) {
                                console.log("Join channel failed", err);
                            });
                        }, function (err) {
                            console.log("AgoraRTC client init failed", err);
                        });

                        channelKey = "";
                        client.on('error', function (err) {
                            console.log("Got error msg:", err.reason);
                            if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
                                client.renewChannelKey(channelKey, function () {
                                    console.log("Renew channel key successfully");
                                }, function (err) {
                                    console.log("Renew channel key failed: ", err);
                                });
                            }
                        });


                        client.on('stream-added', function (evt) {
                            var stream = evt.stream;
                            console.log("New stream added: " + stream.getId());
                            console.log("Subscribe ", stream);
                            client.subscribe(stream, function (err) {
                                console.log("Subscribe stream failed", err);
                            });
                        });

                        client.on('stream-subscribed', function (evt) {
                            var stream = evt.stream;
                            console.log("Subscribe remote stream successfully: " + stream.getId());
                            if ($('div#video #agora_remote' + stream.getId()).length === 0) {
                                $('div#video').append('<div id="agora_remote' + stream.getId() + '" style="float:left; width:810px;height:607px;display:inline-block;"></div>');
                            }
                            stream.play('agora_remote' + stream.getId());
                        });

                        client.on('stream-removed', function (evt) {
                            var stream = evt.stream;
                            stream.stop();
                            $('#agora_remote' + stream.getId()).remove();
                            console.log("Remote stream is removed " + stream.getId());
                        });

                        client.on('peer-leave', function (evt) {
                            var stream = evt.stream;
                            if (stream) {
                                stream.stop();
                                $('#agora_remote' + stream.getId()).remove();
                                console.log(evt.uid + " leaved from this channel");
                            }
                        });
                    }

                    function leave() {
                        document.getElementById("leave").disabled = true;
                        client.leave(function () {
                            console.log("Leavel channel successfully");
                        }, function (err) {
                            console.log("Leave channel failed");
                        });
                    }

                    function publish() {
                        document.getElementById("publish").disabled = true;
                        document.getElementById("unpublish").disabled = false;
                        client.publish(localStream, function (err) {
                            console.log("Publish local stream error: " + err);
                        });
                    }

                    function unpublish() {
                        document.getElementById("publish").disabled = false;
                        document.getElementById("unpublish").disabled = true;
                        client.unpublish(localStream, function (err) {
                            console.log("Unpublish local stream failed" + err);
                        });
                    }

                    function getDevices() {
                        AgoraRTC.getDevices(function (devices) {
                            for (var i = 0; i !== devices.length; ++i) {
                                var device = devices[i];
                                var option = document.createElement('option');
                                option.value = device.deviceId;
                                if (device.kind === 'audioinput') {
                                    option.text = device.label || 'microphone ' + (audioSelect.length + 1);
                                    audioSelect.appendChild(option);
                                } else if (device.kind === 'videoinput') {
                                    option.text = device.label || 'camera ' + (videoSelect.length + 1);
                                    videoSelect.appendChild(option);
                                } else {

                                }
                            }
                        });
                    }

                    getDevices();
                    join();
                </script>

            }

